on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'v*'

name: CI

jobs:
  build:
    name: Build library
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            dylib: libpost.so
            staticlib: libpost.a
            artifact-name: linux
          - os: windows-2019
            dylib: post.dll
            staticlib: post.lib
            artifact-name: windows
    steps:
      - if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y ocl-icd-opencl-dev
        name: Install opencl
      - if: matrix.os == 'windows-2019'
        name: Install opencl
        run: vcpkg install opencl
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@1.76
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ join( matrix.os, '-' ) }}

      - if: matrix.os == 'windows-2019'
        name: Download OpenCL.lib
        run: |
          choco install -y wget unzip
          wget https://github.com/KhronosGroup/OpenCL-SDK/releases/download/v2023.04.17/OpenCL-SDK-v2023.04.17-Win-x64.zip
          unzip -j OpenCL-SDK-v2023.04.17-Win-x64.zip OpenCL-SDK-v2023.04.17-Win-x64/lib/OpenCL.lib

      - name: Version suffix (for release only)
        id: version
        run: echo "suffix=${{ github.ref_type == 'tag' && '-' || ''}}${{ github.ref_type == 'tag' && github.ref || ''}}" >> $GITHUB_OUTPUT
      - name: Build clib
        run: cargo build -p post-cbindings --profile release-clib
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libpost-${{ matrix.artifact-name }}${{ steps.version.output.suffix }}
          path: |
            ffi/post.h
            target/release-clib/${{ matrix.dylib }}
            target/release-clib/${{ matrix.staticlib }}
          if-no-files-found: error

      - name: Build profiler tool
        run: cargo build -p profiler --release
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
      - name: Archive profiler artifacts
        uses: actions/upload-artifact@v3
        with:
          name: profiler-${{ matrix.artifact-name }}${{ steps.version.output.suffix }}
          path: |
            target/release/profiler${{ matrix.os == 'windows-2019' && '.exe' || '' }}
          if-no-files-found: error

      - uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build service
        run: cargo build -p service --release
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
      - name: Archive service artifacts
        uses: actions/upload-artifact@v3
        with:
          name: service-${{ matrix.artifact-name }}${{ steps.version.output.suffix }}
          path: |
            target/release/service${{ matrix.os == 'windows-2019' && '.exe' || '' }}
          if-no-files-found: error

  release:
    name: Publish release
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: List artifacts
        run: ls -R ./artifacts
      - name: Create a draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Pack artifacts
        run: >
          mkdir ./assets;
          for dir in ./artifacts/*/; do
            zip -o -j -r "./assets/$(basename "$dir")-$TAG.zip" "$dir";
          done
        env:
          TAG: ${{ github.ref_name }}
      - name: Upload Release Assets
        run: gh release upload $TAG ./assets/*.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
